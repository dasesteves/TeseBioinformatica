const oracledb = require('oracledb');

const dbConfig = {
  user: 'PCE',
  password: 'PCE',
  connectString: '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=10.21.105.16)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SID=ORCL)))'
};

async function analiseModulosCirurgia() {
    let connection;
    
    try {
        console.log('=======================================================');
        console.log('AN√ÅLISE DETALHADA: M√ìDULOS vs ESPECIALIDADES CIR√öRGICAS');
        console.log('=======================================================\n');
        
        connection = await oracledb.getConnection(dbConfig);
        
        // 1. Rela√ß√£o entre m√≥dulo BLO e especialidades cir√∫rgicas
        console.log('1. M√ìDULO BLO - DISTRIBUI√á√ÉO POR ESPECIALIDADES:\n');
        
        const bloEspecialidades = await connection.execute(`
            SELECT 
                COD_ESPECIALIDADE,
                DES_ESPECIALIDADE,
                COUNT(*) as TOTAL_EPISODIOS,
                ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as PERCENTAGEM
            FROM PCE.PCEEPISODIOS
            WHERE MODULO = 'BLO'
            GROUP BY COD_ESPECIALIDADE, DES_ESPECIALIDADE
            ORDER BY COUNT(*) DESC
        `);
        
        console.log('C√≥d | Especialidade | Total | %');
        console.log('-'.repeat(70));
        bloEspecialidades.rows.slice(0, 15).forEach(row => {
            const esp = (row[1] || 'N/A').substring(0, 40);
            console.log(`${(row[0] || 'N/A').toString().padEnd(4)} | ${esp.padEnd(40)} | ${String(row[2]).padEnd(5)} | ${row[3]}%`);
        });
        
        // 2. Onde est√£o as especialidades cir√∫rgicas
        console.log('\n\n2. ONDE EST√ÉO AS ESPECIALIDADES CIR√öRGICAS?\n');
        
        const cirurgiaDistribuicao = await connection.execute(`
            SELECT 
                MODULO,
                COUNT(*) as TOTAL,
                COUNT(DISTINCT COD_ESPECIALIDADE) as ESP_DIFERENTES
            FROM PCE.PCEEPISODIOS
            WHERE UPPER(DES_ESPECIALIDADE) LIKE '%CIRURG%'
               OR UPPER(DES_ESPECIALIDADE) LIKE '%ANEST%'
            GROUP BY MODULO
            ORDER BY COUNT(*) DESC
        `);
        
        console.log('M√≥dulo | Epis√≥dios Cir√∫rgicos | Especialidades');
        console.log('-'.repeat(50));
        cirurgiaDistribuicao.rows.forEach(row => {
            console.log(`${(row[0] || 'N/A').padEnd(7)} | ${String(row[1]).padEnd(19)} | ${row[2]}`);
        });
        
        // 3. Top especialidades no m√≥dulo BLO vs outras cir√∫rgicas
        console.log('\n\n3. COMPARA√á√ÉO DETALHADA - BLO vs ESPECIALIDADES CIR√öRGICAS:\n');
        
        const comparacao = await connection.execute(`
            SELECT 
                'MODULO_BLO' as TIPO,
                DES_ESPECIALIDADE,
                COUNT(*) as TOTAL
            FROM PCE.PCEEPISODIOS
            WHERE MODULO = 'BLO'
            GROUP BY DES_ESPECIALIDADE
            
            UNION ALL
            
            SELECT 
                'ESP_CIRURGICA' as TIPO,
                DES_ESPECIALIDADE,
                COUNT(*) as TOTAL
            FROM PCE.PCEEPISODIOS
            WHERE UPPER(DES_ESPECIALIDADE) LIKE '%CIRURG%'
               OR UPPER(DES_ESPECIALIDADE) LIKE '%ANEST%'
            GROUP BY DES_ESPECIALIDADE
            
            ORDER BY TIPO, TOTAL DESC
        `);
        
        console.log('Especialidades no m√≥dulo BLO:');
        console.log('-'.repeat(60));
        let inBLO = true;
        comparacao.rows.forEach(row => {
            if (row[0] === 'ESP_CIRURGICA' && inBLO) {
                console.log('\nTodas as especialidades cir√∫rgicas (todos os m√≥dulos):');
                console.log('-'.repeat(60));
                inBLO = false;
            }
            if (row[0] === 'MODULO_BLO') {
                const esp = (row[1] || 'N/A').substring(0, 45);
                console.log(`${esp.padEnd(45)} | ${row[2]}`);
            } else if (!inBLO) {
                const esp = (row[1] || 'N/A').substring(0, 45);
                console.log(`${esp.padEnd(45)} | ${row[2]}`);
            }
        });
        
        // 4. Verificar se existe sobreposi√ß√£o
        console.log('\n\n4. SOBREPOSI√á√ÉO: ESPECIALIDADES CIR√öRGICAS NO M√ìDULO BLO?\n');
        
        const sobreposicao = await connection.execute(`
            SELECT 
                DES_ESPECIALIDADE,
                COUNT(*) as TOTAL_BLO,
                (SELECT COUNT(*) 
                 FROM PCE.PCEEPISODIOS 
                 WHERE DES_ESPECIALIDADE = blo.DES_ESPECIALIDADE 
                   AND MODULO != 'BLO') as TOTAL_OUTROS_MODULOS
            FROM PCE.PCEEPISODIOS blo
            WHERE MODULO = 'BLO'
              AND (UPPER(DES_ESPECIALIDADE) LIKE '%CIRURG%'
                   OR UPPER(DES_ESPECIALIDADE) LIKE '%ANEST%')
            GROUP BY DES_ESPECIALIDADE
            ORDER BY COUNT(*) DESC
        `);
        
        if (sobreposicao.rows.length > 0) {
            console.log('Especialidades cir√∫rgicas que aparecem no BLO:');
            console.log('Especialidade | BLO | Outros M√≥dulos');
            console.log('-'.repeat(70));
            sobreposicao.rows.forEach(row => {
                const esp = (row[0] || 'N/A').substring(0, 35);
                console.log(`${esp.padEnd(35)} | ${String(row[1]).padEnd(3)} | ${row[2]}`);
            });
        } else {
            console.log('‚ùå Nenhuma especialidade cir√∫rgica encontrada no m√≥dulo BLO');
        }
        
        // 5. An√°lise temporal
        console.log('\n\n5. AN√ÅLISE TEMPORAL - √öLTIMOS EPIS√ìDIOS DE CADA TIPO:\n');
        
        const temporal = await connection.execute(`
            SELECT 
                'BLO' as ORIGEM,
                COUNT(*) as TOTAL_ULTIMO_MES,
                MAX(DTA_EPISODIO) as ULTIMO_EPISODIO
            FROM PCE.PCEEPISODIOS
            WHERE MODULO = 'BLO'
              AND DTA_EPISODIO >= TRUNC(SYSDATE) - 30
            
            UNION ALL
            
            SELECT 
                'CIRURGIA_ESP' as ORIGEM,
                COUNT(*) as TOTAL_ULTIMO_MES,
                MAX(DTA_EPISODIO) as ULTIMO_EPISODIO
            FROM PCE.PCEEPISODIOS
            WHERE (UPPER(DES_ESPECIALIDADE) LIKE '%CIRURG%'
                   OR UPPER(DES_ESPECIALIDADE) LIKE '%ANEST%')
              AND DTA_EPISODIO >= TRUNC(SYSDATE) - 30
        `);
        
        console.log('Origem | √öltimo M√™s | √öltimo Epis√≥dio');
        console.log('-'.repeat(50));
        temporal.rows.forEach(row => {
            const data = row[2]?.toISOString()?.split('T')[0] || 'N/A';
            console.log(`${row[0].padEnd(11)} | ${String(row[1]).padEnd(10)} | ${data}`);
        });
        
        // 6. Investigar c√≥digos de especialidade suspeitos
        console.log('\n\n6. C√ìDIGOS DE ESPECIALIDADE DUPLICADOS/SUSPEITOS:\n');
        
        const duplicados = await connection.execute(`
            SELECT 
                COD_ESPECIALIDADE,
                COUNT(DISTINCT DES_ESPECIALIDADE) as DESC_DIFERENTES,
                LISTAGG(DES_ESPECIALIDADE, ' | ') WITHIN GROUP (ORDER BY DES_ESPECIALIDADE) as DESCRICOES
            FROM (
                SELECT DISTINCT COD_ESPECIALIDADE, DES_ESPECIALIDADE
                FROM PCE.PCEEPISODIOS
                WHERE COD_ESPECIALIDADE IS NOT NULL
                  AND (UPPER(DES_ESPECIALIDADE) LIKE '%CIRURG%'
                       OR UPPER(DES_ESPECIALIDADE) LIKE '%ANEST%')
            )
            GROUP BY COD_ESPECIALIDADE
            HAVING COUNT(DES_ESPECIALIDADE) > 1
            ORDER BY COUNT(DES_ESPECIALIDADE) DESC
        `);
        
        if (duplicados.rows.length > 0) {
            console.log('C√≥digos com m√∫ltiplas descri√ß√µes:');
            console.log('C√≥digo | Descri√ß√µes');
            console.log('-'.repeat(80));
            duplicados.rows.forEach(row => {
                console.log(`${row[0]} | ${row[2]}`);
            });
        } else {
            console.log('‚úÖ N√£o h√° c√≥digos de especialidade com descri√ß√µes duplicadas');
        }
        
        // 7. Conclus√£o e recomenda√ß√£o
        console.log('\n\n=======================================================');
        console.log('CONCLUS√ïES E RECOMENDA√á√ïES');
        console.log('=======================================================\n');
        
        const totalBLO = bloEspecialidades.rows.reduce((sum, row) => sum + row[2], 0);
        const cirurgicasBLO = sobreposicao.rows.reduce((sum, row) => sum + row[1], 0);
        const percentagemCirurgica = cirurgicasBLO > 0 ? (cirurgicasBLO / totalBLO * 100).toFixed(2) : 0;
        
        console.log('üìä AN√ÅLISE DOS DADOS:');
        console.log(`- M√≥dulo BLO tem ${totalBLO} epis√≥dios totais`);
        console.log(`- ${cirurgicasBLO} epis√≥dios s√£o de especialidades cir√∫rgicas (${percentagemCirurgica}%)`);
        console.log(`- ${totalBLO - cirurgicasBLO} epis√≥dios s√£o de outras especialidades`);
        
        console.log('\nüéØ RECOMENDA√á√ÉO PARA O M√ìDULO:');
        if (percentagemCirurgica > 50) {
            console.log('‚úÖ BLO = Bloco Operat√≥rio/Cir√∫rgico');
            console.log('   - Maioria s√£o epis√≥dios de cirurgia');
            console.log('   - Usar m√≥dulo BLO para cirurgia faz sentido');
        } else {
            console.log('‚ö†Ô∏è  BLO parece ser mais ambulat√≥rio que cir√∫rgico');
            console.log('   - Considerar filtrar por especialidades cir√∫rgicas');
            console.log('   - Ou criar m√≥dulo CIR espec√≠fico');
        }
        
        console.log('\nüìã IMPLEMENTA√á√ÉO SUGERIDA:');
        console.log('1. Usar m√≥dulo BLO como base');
        console.log('2. Filtrar por especialidades cir√∫rgicas se necess√°rio');
        console.log('3. Manter nome "Cirurgia" na interface (mais claro para utilizadores)');
        console.log('4. Backend pode usar BLO internamente');
        
    } catch (err) {
        console.error('Erro:', err);
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Erro ao fechar conex√£o:', err);
            }
        }
    }
}

// Executar
analiseModulosCirurgia();